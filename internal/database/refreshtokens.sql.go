// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refreshtokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO refreshtokens(token, created_at, updated_at, user_id, expires_at)
VALUES ($1, NOW(), NOW(), $2, $3)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserToken = `-- name: GetUserToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refreshtokens
WHERE token = $1
`

func (q *Queries) GetUserToken(ctx context.Context, token string) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, getUserToken, token)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refreshtokens
SET revoked_at = NOW() -- Or $2 if you want to pass the timestamp from Go
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
